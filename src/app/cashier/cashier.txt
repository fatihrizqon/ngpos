import { Component, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { formatDate } from '@angular/common';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { Observable } from 'rxjs';
import { map, startWith } from 'rxjs/operators';
import { Order } from '../interfaces/Order';
import { Product } from '../interfaces/Product';
import { AppService } from '../services/app.service';
import { MatDialog } from '@angular/material/dialog';
import { DialogComponent } from '../layouts/dialog/dialog.component';

@Component({
  selector: 'app-cashier',
  templateUrl: './cashier.component.html',
  styleUrls: ['./cashier.component.scss'],
})
export class CashierComponent implements OnInit, OnChanges {
  index!: number;
  createOrder = true;
  products!: Product[];
  order_code!: String;
  order: Order[] = [];
  orders: any[] = [];
  total_items!: any;
  total_quantity!: any;
  total_price!: any;
  savedOrders: Order[] = [];
  quantities = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  quantity!: number;
  query: any;
  disableProducts = true;
  clicked = false;
  currentDate!: String;

  searchForm = new FormControl();
  paymentForm = new FormControl();
  options: string[] = [];
  filteredOptions!: Observable<string[]>;

  constructor(private appService: AppService, private dialog: MatDialog) {
    this.currentDate = formatDate(
      new Date(),
      'dd/MM/yyyy HH:mm:ss',
      'en-US',
      '+0700'
    );
  }

  ngOnInit(): void {
    this.appService.getProducts().subscribe(
      (response) => {
        this.products = response.data;
        this.options = this.products.map((product: any) => product.code);
        // console.log(this.options);
      },
      (err) => {
        if (err.error.message) {
          alert(err.error.message);
        }
      }
    );

    this.filteredOptions = this.searchForm.valueChanges.pipe(
      startWith(''),
      map((value) => this._filter(value))
    );

    this.orders = JSON.parse(localStorage.getItem('orders') || '[]');
  }

  private _filter(value: string): string[] {
    const filterValue = value.toLowerCase();

    return this.options.filter((option: any) =>
      option.toLowerCase().includes(filterValue)
    );
  }

  ngOnChanges() {}

  newOrder() {
    this.createOrder = !this.createOrder;
    this.order_code = this.generateCode();
  }

  addItem() {
    this.clicked = false;
    var code = this.order_code;
    var quantity = 1;
    var keyword = this.searchForm.value;
    var result = this.products.filter((product) => product.code === keyword);
    const check = this.order.find(
      (x) => x.product_code == this.searchForm.value
    );

    if (check) {
      var i = this.order.indexOf(check);
      this.addQty(i);
      this.searchForm.setValue('');
      return this.refresh();
    } else {
      console.log('An item has been added.');
      var item = {
        code: code,
        product_name: result[0].name,
        product_code: result[0].code,
        quantity: quantity,
        price: result[0].sell * quantity,
        created_at: this.currentDate,
      };

      const newItem = JSON.parse(JSON.stringify(item));
      this.order.push(newItem);
      this.searchForm.setValue('');
      return this.refresh();
    }
  }

  addQty(i: number) {
    console.log('The quantity has been added.');
    this.clicked = false;
    this.order[i].quantity = this.order[i].quantity + 1;
    return this.refresh();
  }

  reduceQty(i: number) {
    console.log('The quantity has been reduced.');
    this.clicked = false;
    if (this.order[i].quantity < 2) {
      this.removeItem(i);
      return this.refresh();
    }
    this.order[i].quantity = this.order[i].quantity - 1;
    return this.refresh();
  }

  getOrder(i: number) {
    console.log('Get an Index.');
    this.index = i;
    this.createOrder = false;
    this.order = this.orders[i];
    this.refresh();
    if (this.order_code === undefined) {
      return (this.order_code = this.orders[i][0].code);
    }
  }

  removeItem(i: number) {
    console.log('An item has been removed.');
    this.clicked = false;
    if (this.index !== undefined) {
      this.orders[this.index].splice(i, 1);
      return this.refresh();
    }
    return this.order.splice(i, 1);
  }

  saveOrder() {
    this.clicked = true;
    if (this.order.length === 0) {
      return alert('Cannot save an empty order.');
    }
    console.log('The order is exists.');
    if (this.index !== undefined) {
      console.log('Loaded from lists');
      return localStorage.setItem('orders', JSON.stringify(this.orders));
    } else {
      this.orders.push(this.order);
      console.log('A new order.');
      return localStorage.setItem('orders', JSON.stringify(this.orders));
    }
  }

  removeOrder() {
    if (this.index !== undefined) {
      return this.refresh();
    } else {
      return (this.orders = []);
    }
  }

  checkOut() {
    const dialogRef = this.dialog
      .open(DialogComponent, {
        width: '550px',
        data: {
          title: 'Check Out',
          message: 'Do you want to proceed this transaction?',
          action_yes: 'Yes',
          action_no: 'No',
        },
      })
      .afterClosed()
      .subscribe((res) => {
        console.log(res);
      });
  }

  refresh() {
    if (this.index !== undefined) {
      console.log('Refresh Saved Orders.');
      if (this.orders[this.index].length < 1) {
        this.total_items = 0;
        this.total_quantity = 0;
        return (this.total_price = 0);
      }
      this.total_items = this.orders[this.index].length;
      this.total_quantity = this.orders[this.index].reduce(
        (acc: any, curr: any) => acc + curr.quantity,
        0
      );
      return (this.total_price = this.orders[this.index].reduce(
        (acc: any, curr: any) => acc + curr.quantity * curr.price,
        0
      ));
    } else {
      console.log('Refresh New Order.');
      if (this.order.length < 1) {
        this.total_items = 0;
        return (this.total_price = 0);
      }
      this.total_items = this.order.length;
      this.total_quantity = this.order.reduce(
        (acc: any, curr: any) => acc + curr.quantity,
        0
      );
      return (this.total_price = this.order.reduce(
        (acc: any, curr: any) => acc + curr.quantity * curr.price,
        0
      ));
    }
  }

  generateCode() {
    var date = formatDate(new Date(), 'HHmmssddMMyyyy', 'en-US', '+0700');
    var length = 3;
    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    var result = '';
    for (var i = 0; i < length; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result + date;
  }
}
